Slide 1:

Hello and Welcome, Myself Rehan Ali, And in this vedio or in this series of videos I am gonna show you 
how can we approach to write the code in c programming language for printing the different types of patterns. just for the side note,
we can write our code in any programming language to print the same pattern, there is just different of the syntax only,
so for the demonstrating purpose, we will write our code in c programming language here, but in the description of this videos,
you will find the link where I have uploaded source codes of the patterns in these 4 programming languase, such as (c, c++, java and python).
And Also, for writing and executing our programs, I used vs code or visual studio code, you may use any IDE of your choice, 
but if you want to setup your vs code for running c/c++ programs, you can watch this video that I am showing in Icard button above, 
you will also find the same link in the description of this video. 
so yeah, enough talks, lets get started.



Alright, So, in this vedio what we are gonna do is to write the code to print these square patterns, 
namely solid square, hollow square, hollow with cross and hollow with diagonal square. but before dive into it, 
what I want to do is to provide you some basics or the fundamentals tools, and these tools will eventually becomes 
the basis for printing any kind of patterns. 

Slide : 2

So, now, there is a concept of looping in programming languages, the loops are nothing but 
the iterative tool or structure that allows us to repeat the execution of some instructions till the condition stays true. 
we will see this in action in a while, So in c programming language there are basically 3 types loops such
for loop
while loop
and do while loop

Although, we can write our code by using any of the loop listed here. but in this series of videos we'll write our code by using 
the for loop. because its easy to understand as all the 3 parts we'll find at the one place. see the syntax of the for loop here.
it basically contains 4 parts but the last part is the obvious one, because, eventually we need to execute some statements there, 
but these 3 parts such as initialization, condition and steps are crucial one. first we'll see these parts in theory and than we'll
see their practical implecation. 
Here, 
the 1st part is initialization, as the name implise itself, 
this part is basically used for initializing our loop, or we can say that this is nothing but the entry point of for loop. 
Now, 
the second part is the condition, as the name suggest, 
there would be some condtion that will track of whether the loop should continue its execution or should terminated, 
if this condition evaluates to true, it means that loop will keep running, and when this condition becomes false, 
loop will get terminated automatically.
also, you have to keep this in your mind, for breaking or terminating our loop after having done intended task,
we must need to tweek this condition in such a way that at some points, it becomes false, otherwise loop will keep running 
for a lifetime ,and... this condition with respect to loops is also known as infinite loop. means the loop will keep running infinitely.
and.. for achieving this purpose of terminating the loop in between,

the 3rd part comes into the picture, this 3rd part is nothing but the steps.
here we twist some value of the variable that is used in our condition part, (by eighther increamenting or decreamenting its value), 
so that at a particular point, the condition will becomes false and the loop will get terminated. 
alright, I know that, this theory is very abstract, but don't worry, if you haven't understood any of the part or the whole
explaination. Now, we'll see this in action by doing some practical work.

(In Visual Studio...)

Ohkay so here, 
we are gonna write these two programs first, to better understand the working of for loop. 
so 1st program is to print table of any number
and the 2nd program is for printing tables of these number from 1 to 10. 
So this is the syntax of the for loop, we already seen, 
but here I numbered these part as they executs,
we'll see this in while. like 1st initial part will execute, then we check the condtion, 
if it is true, then executes statements inside the block, 
then eigther increament or decreament this value, and again check the condition and follow the same steps as before. 
and when this evaluates to false, loop will get terminate itself. 

So here, I wriiten solution of 1st problem as we discused. this is the table of 7. 
we can change this value to print table of any number. 
but writing code like this one, is not efficient and also this is very time consuming to write same statement multiple times. 
you may think that you can write this prtinf()in this way.,
but again its time consuming and also less efficient. you may argue that for this particular example, efficiency doesn't matter, 
I completely agree with you, but what if I tell you to print same table 100 times, instead of multiplying this tableOf value from 1 to 10, 
but now I want our output to be printed as multiplication from 1 to 100. as like this. 
will you write this code in the same way as we wrote before, for printing 1 to 10??... 
or will you try to find some better way to struct it??. now we'll see how can we write solution of this problem using the for loop.
here I first declared varaible start of data type integer. and also the endCondition variable to make it clear where to stop. 
now, I initilize our for loop by assigning start to 1, here I declare some condition, as start <= endCondition,
I will tell you this in a while, why I am giving this condition, then we'll increament start value by 1 as start = start + 1, then write this printf() 
function inside this for loop, in this way. Now, lets give it a try. we get the same output as before. but this time using our for loop. 
Now, we'll see, how it works.
(Explaining Loop parts)
- this part only runs once, after initializing, loop will never visit this part again. here we are assignig value of start variable as 1. 
- now we check the condtion, as whether start is smaller or equals to endCondition, yes it is, because endCondition has the vlaue 10. and 1 is smaller then 10
- then we execute each statements inside for loop block, here we only use one statement to print the value of start variable. 
- after executing all the statements, loop will visit to this part, here we are increament value of start by 1. hence, now value of start is nothing but 2.
then again check this condition, this time also, the condition is true only, cause 2 is smaller then 10. 
we again execute statements inside this block and print value of start, this is why we get value as 2 printed. 
and again increament value then check the condition and execute our block and so on. now, after printing 10. when we increament the value of start, it becomes 11.
and now when we check this condition, this time it is false as 11 is not smaller or equals to 10. this is where our loop get terminated. 
we can easily cross check it by printing start value after finishing our loop, Now run the code and see the output. 
here you can see that value of start is 11. Now, I hope you get the basic idea of using the loops and also understood the for loop as well.
here, as we only intrested to increament this value by one, so instead of using this syntax, we can use shorthand increament operator. 
this simply means that we are increamenting this value by one. now we can multiply our tableOf variable with the value of start to get our actual result.
And.. I also want our result to be printed as a single column or we can say vertically instead of printing it horizontly or in single row. 
for this purpose I'll use line braek character here inside printf() function.
now we get our output something like this.


Alright, so now we already understood the loop, we'll solve our 2nd problem. this output looks like table in which these all are rows and these are nothing 
but columns as you can see. in our previous example, we already printed our output as a single column. now revisit that example.
here, we are printing this in single column and multiple rows for example 10 rows. to get this clear, we'll append some eqaul sign here, and then run this code.
as you can see now, this output is clearly visible as rows and columns, means in the form of table. but instead of printing these equal sign here, 
we need to print the table of that particular number like table of 1 here, table of 2 here, table of 3 here and so on..
this problme we already had saolved, what we did there, we had used for loop and run it 10 times as this one. 
(This type of loop loop is known as nested loop in c, means one loop inside another loop.) if we run this code, we get output something like this. 
now we are very closer to solution of our second problem. here again, as we did before, we'll print table of these numbers.

now run this code. congratulations, we did it!. we are succefully write code for both the problems. but here, we can make some improvement though,
as we know, eventually we are gonna print the table of thse numbers, and these numbers are nothing but the rowNumbers. 
so, instead of using this tableOf vsriable. we can simply use start variable here. 
and to be more specific, I'll change this variable names as like this. here we are using rowVal variable for each value of row,
similarly colVal for each value of columns. and numRows to define number of times the outer loop should run, 
and numCols to defind number of times the inner loop should run.
for simplicity, I used two these two variables numRows and colRows. but as we know that, both are containg the same value. 
we can use numRows here too, instead of using this numCols. Alright, enough talk, can you guess what type of pattern we already printed here???
absolutely right, we printed our solid square pattern, we just need to print here astric or star symbole instead of printing this value. 
Now when we run this, we get our solid sqaure pattern printed. Now, lets move to the ptint the next pattern.   
 


Slide 3:

Alright, So, as we already write our code to print solid square, Now we'll see, 
how can we write our code to print this hollow sqaure pattern. 
here, the number of rows are 7 where value of row will vary from 1 to 7 and the value of column will also vary from 1 to 7.
Now, if we analyze this problem, we can simply say that, print stars or any patternSymbol if and only if value of column is 1. and also
for the last value of the column, and in this case, it is seven which is same as our number of rows. similarly, 
this is also true for values of rows as you can see in this picture. 
if this is not the case, print spaces instead of printing the patternSymbol. 
this type of behaviour for example executing some part of code only when the particular condition is true, and executing another part when it is false 
can be achieved by using the conditional statement as like this one, here if block will only get executed when the value of someCondition variable 
evaluates to true, otherwise else part get executed. So, now lets write our code for this.

(In Visual Studio...)

Here, this code is written for priting our solid square, I just add this patternSymbole variable here. so that we can change value of this variable to print any symbol.
Now, as we already drived our condition for printing hollow sqaure pattern, we'll use those condtion here. this is how if-else blocks looks. 
here, inside this if block, we'll use these 4 conditions. In this way, these are nothing but the or operators, you can find some link in the description to get more into it.
but this operator used for separating multiple conditions, and... when either of these condition evaluates to true, this if block get executed,
otherwise this else block will get the chance to executes statements inside this block. lets run it, we'll get this output because we have'nt write any statements
inside else block, but as we know that, other then these values, we need to print spaces. therefor, here inside this else block, 
I'll use one printf() function to print spaces.
now run it again, and... yeah, we get our output. here, we written our code to print hollow square pattern... lets see the next example. 



Slide 4:

Now we'll see, how can we aproach to write the code for printing this pattern, here also, the number of rows are 7,
by carefully looking this picture, we can conclude that, this pattern is very similar to this one, that we already printed earlier.
only this part is different here, it means that all the conditions of hollow square will also be valid for this pattern.
now, we just need to find some way to print these two parts there. These both values are approaximately half of the value of numRows
as you can see here. but in c, when we peform arithmatic division on integer number, 
it will round of the decimal value and return only integer part as I am showing here. now, looking at thses values, we can easily construct
our remaining conditions as like this... it means that, we need to include these two more condtions with our 4 previous conditions inside the if block.
thats all, now we already derived all the conditions that will sufficient to print this hollow square with cross pattern, 
alrigh, lets see, how can we write our code for this problem.


(In Visual Studio...)
Here, this is the code that we wrote for printing hollow square, in our previous example, now, as we have these two more condition here, 
just write these conditions also inside this if block, in this way, and yeah... now run the code and see the output. 
this is nothing but our hollow sqaure with cross pattern, Now, lets write code for our final pattern.    



Slide 5:

alright, 
so finally we reached here to print this last pattern, 
as before, 
these 4 conditions will remain the same. since we need hollow square here too.
now we need to first focus on this part of the pattern,
here, we can clearly see that, 
the pattern symbol is printed or star is printed only when the value of row is same as the value of column 

(Means print patternSymbol when the value of rowVal is 1 and corresponding value of colVal is also 1, 
similarly when rowVal is 2,  colVal should also has same value as 2, and for rowVal 3 the coresponding colVal should also be 3, and so on.).
it means that we found our first extra condition that will looks something like this.

now, we only need to derive our condtion to print second diagonal. consider this figure, here we need to find some condition to print star at these places.
is there any similarities between these vlaues??, that will become our base condition?...
 
lets see together. here, when the value of rowVal is 1, corresponding value of colVal is 7, similarly, for the rowVal - 2, colVal is 6,
for rowVal = 3, colVal = 5, and so on... it means that, in every iteration, value of rowVal get increamented and the value of colVal get decreamented.
consider these values here. we need to find some relation between these values. lets give it a try, 
as we can see here, for rowVal = 1, colVal should be 7
or we can say, it is same as number rows that is 7 right now.
our first equation looks something like this, 
here, we need to use both variables rowVal and colVal because our condition will depends on both of these values, lets do dry run on it,

for rowVal = 1.., colVal is 7 as it is same as numRows, because adding and then substracting rowVal, only numRows remains there. 
Now, when the value of rowVal is 2, colVal will again remain same as 7. but this time we required colVal value as 6. 
means this condition will not work here.
Now, we derive our second condition like this, 
Why I am doing this all, because, at the end, we need to find some condition, which will relates these both variables. 
only then we will able to print this diagonal. 
alright, 
so here when the value rowVal is 1, colVal will be 7. thats good, for rowVal 2, colVal again fails here.
becuase we get colVal as 8, instead of 6. but looking at these values, what we can do is, instead of adding rowVal to numbRows, we can substract it from numRos.
in this way... lets dry run it. 
for rowVal 1, colVal is 7. its fine, and for rowVal 2, colVal is 6. and this is what we want here.. and again for rowVal 3, colVal is 5.
and so on.. means, we found our second condition by using this relation between them. so now we can say that, this is our second and the last condition.. 
here I just swept these parts, to make this more readable... Now lets give it try...


(In Visual Studio...)
Here, again I am using the same code, which we had written for our hollow sqaure pattern, now I just include these two more conditions in this if block..
just run it and see the output.. 


Congratulations, we did it!, we succesfully wrote our code to print these square patterns. Thanks for patience. If you like the tutorial, please click on like button
and share it with your friends. also subscribe the channel and don't forget to press the bell Icon to never missed out incomming videos like this one.
and that being said, see you in the video, Bye bye...    






 































